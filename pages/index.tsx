import {Fragment, useEffect} from 'react'
import {GetServerSideProps, NextPage} from 'next'
import Head from 'next/head'


import {Price, PrismaClient, Product, Region} from '@prisma/client'

import {NewItem, Input, Select, List} from '../components'



import {
	regionItem,
	productItem,
	priceItem,
	priceList,
	regionList,
	productList,
	regionMap, productMap
} from '../stores'


import sty from '../styles/home.module.sass'





const NewRegion = () =>
	<NewItem name='region' store={[regionItem, regionList]}>
		<Input placeholder='название' item={regionItem} fieldName='name' />
		<Input placeholder='код' item={regionItem} fieldName='code' />
	</NewItem>



const NewProduct = () =>
	<NewItem name='product' store={[productItem, productList]}>
		<Input placeholder='название' item={productItem} fieldName='name' />
	</NewItem>




const NewPrice = () => {
	return <NewItem name='price' store={[priceItem, priceList]}>
		<Select<Price> store={[priceItem, regionList]} fieldName='regionId' />
		<Select<Price> store={[priceItem, productList]} fieldName='productId' />
		<Input placeholder='название' item={priceItem} fieldName='price' asNumber />
	</NewItem>
}




type Props = {
	regions: Region[]
	products: Product[]
	prices: Price[]
}


const PriceList = () => {
	const st = priceList.useStatus()
	const groups = {}

	const items = priceList.items.sort((it1, it2) =>
		it1.regionId > it2.regionId ? 1 : -1
	)

	const region = (id: number) =>
		!groups[id] && (
			groups[id] = true, <b>{regionMap[id]}</b>
		)

	let isRem

	return !st ? <>загрузка</> : <div className={sty.prices}>{
		items.map(it => <Fragment key={it.id}>
			{(isRem = it.id == priceList.removingId, region(it.regionId))}
			<span className={isRem ? sty.disabled : undefined}>{productMap[it.productId]}</span>
			<span className={isRem ? sty.disabled : undefined}>{it.price}</span>
			<i
				className={isRem ? sty.wait : undefined}
				onClick={!isRem ? _ => priceList.remove(it.id) : undefined}
			>&ndash;</i>
		</Fragment>)}
	</div>
}

const Toggler = (p: { num, title }) => <>
	<input type='radio' id={'toggler' + p.num} name='toggler' />
	<label htmlFor={'toggler' + p.num}>{p.title}</label>
</>

const Home: NextPage<Props> = p => {
	useEffect(() => {
		regionList.items = p.regions
		productList.items = p.products
		priceList.items = p.prices
		
		regionList.forceRefresh()
		productList.forceRefresh()
		priceList.forceRefresh()
	}, [])

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app"/>
				<meta name="viewport" content="width=device-width, initial-scale=1"/>
				<link rel="icon" href="/favicon.ico"/>
			</Head>

			<main className={sty.main}>
				<div className={sty.tabs}>
					{
						['Регионы', 'Продукты', 'Цены'].map((it, i) =>
							<Toggler num={i} title={it} />
						)
					}
					
					<div id='tab1'>
						<List store={regionList} />
						<hr />
						<NewRegion />
					</div>
					<div id='tab2'>
						<List store={productList} />
						<hr />
						<NewProduct />
					</div>
					<div id='tab3'>
						<PriceList />
						<hr />
						<NewPrice />
					</div>
				</div>
			</main>
		</>
	)
}


export default Home

export const getServerSideProps: GetServerSideProps<Props> = async () => {
	const prisma = new PrismaClient()
	const regions = await prisma.region.findMany()
		, products = await prisma.product.findMany()
		, prices = await prisma.price.findMany()
	//console.log(regions)
	return {
		props: {
			regions, products, prices
		}
	}
}