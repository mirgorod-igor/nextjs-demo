import {Fragment, useEffect} from 'react'
import {GetServerSideProps, NextPage} from 'next'
import Head from 'next/head'
import {Inter} from '@next/font/google'

import {Price, PrismaClient, Product, Region} from '@prisma/client'

import {NewItem, Select, List} from '../components'



import {
	regionItem,
	productItem,
	priceItem,
	priceList,
	regionList,
	productList,
	regionMap, productMap
} from '../stores'


import sty from '../styles/home.module.sass'



const inter = Inter({subsets: ['latin']})





const NewRegion = () =>
	<NewItem name='region' store={[regionItem, regionList]}>
		<input onChange={e => regionItem.value.name = e.target.value} />
		<input onChange={e => regionItem.value.code = e.target.value} />
	</NewItem>



const NewProduct = () =>
	<NewItem name='product' store={[productItem, productList]}>
		<input onChange={e => productItem.value.name = e.target.value} />
	</NewItem>




const NewPrice = () => {
	return <NewItem name='price' store={[priceItem, priceList]}>
		<Select<Price> store={[priceItem, regionList]} valueName='regionId' />
		<Select<Price> store={[priceItem, productList]} valueName='productId' />
		<input onChange={e => priceItem.value.price = parseFloat(e.target.value)} />
	</NewItem>
}




type Props = {
	regions: Region[]
	products: Product[]
	prices: Price[]
}


const PriceList = () => {
	const st = priceList.useStatus()
	const counts = {}

	const items = priceList.items.sort((it1, it2) =>
		it1.regionId > it2.regionId ? 1 : -1
	)

	const region = (id: number) =>
		!counts[id] && (
			counts[id] = true, <b style={{ gridColumn: 'span 3' }}>{regionMap[id]}</b>
		)

	return <div className={sty.prices}>{
		items.map(it => <Fragment key={it.id}>
			{region(it.regionId)}
			<span>{productMap[it.productId]}</span>
			<span>{it.price}</span>
			<i onClick={_ => priceList.remove(it.id)}>&ndash;</i>
		</Fragment>)}
	</div>
}


const Home: NextPage<Props> = p => {
	useEffect(() => {
		regionList.items = p.regions
		productList.items = p.products
		priceList.items = p.prices
		
		regionList.forceRefresh()
		productList.forceRefresh()
		priceList.forceRefresh()
	}, [])

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app"/>
				<meta name="viewport" content="width=device-width, initial-scale=1"/>
				<link rel="icon" href="/favicon.ico"/>
			</Head>

			<main className={sty.main}>
				<div className={sty.tabs}>
					<input type='radio' id='toggler1' name='toggler' />
					<label htmlFor='toggler1'>Регионы</label>
					
					<input type='radio' id='toggler2' name='toggler' />
					<label htmlFor='toggler2'>Продукты</label>
					
					<input type='radio' id='toggler3' name='toggler' />
					<label htmlFor='toggler3'>Цены</label>
					
					<div id='tab1'>
						<List store={regionList} />
						<hr />
						<NewRegion />
					</div>
					<div id='tab2'>
						<List store={productList} />
						<hr />
						<NewProduct />
					</div>
					<div id='tab3'>
						<PriceList />
						<hr />
						<NewPrice />
					</div>
				</div>
			</main>
		</>
	)
}


export default Home

export const getServerSideProps: GetServerSideProps<Props> = async () => {
	const prisma = new PrismaClient()
	const regions = await prisma.region.findMany()
		, products = await prisma.product.findMany()
		, prices = await prisma.price.findMany()
	//console.log(regions)
	return {
		props: {
			regions, products, prices
		}
	}
}